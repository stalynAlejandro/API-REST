// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.6.0.0
//      SpecFlow Generator Version:3.6.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace KeTePongoServer.Spec.Features.V1_0
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.6.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("UserPhone", Description="       User phone scenarios", SourceFile="Features\\v1_0\\UserPhone.feature", SourceLine=0)]
    public partial class UserPhoneFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "UserPhone.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/v1_0", "UserPhone", "       User phone scenarios", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void UserRequestToConfirmHisPhoneNumber(string userType, string telephone, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "basic"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("UserType", userType);
            argumentsOfScenario.Add("Telephone", telephone);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User request to confirm his phone number", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 5
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
testRunner.Given(string.Format("1_0 a new user request with (Type:\'{0}\' UserName:\'pescadosbahia.UserRequestToConf" +
                            "irmHisPhoneNumber.{0}\' UserEmail:\'pescadosbahia.UserRequestToConfirmHisPhoneNumb" +
                            "er.{0}@mail.com\' Password:\',Adios22\' Name:\'PescadosBahia\')", userType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 7
    testRunner.And("1_0 get user access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 8
    testRunner.And("1_0 response is Ok", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 9
    testRunner.And("1_0 start using access token for all requests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 10
    testRunner.When(string.Format("1_0 user requests to confirm his phone number (Telephone:\'{0}\')", telephone), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 11
    testRunner.Then("1_0 response is Accepted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 12
    testRunner.And(string.Format("1_0 a confirm phone sms was sent successfully to the user phone number (Telephone" +
                            ":\'{0}\') and the user was issued a valid two factor code using sms provider", telephone), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 13
    testRunner.When(string.Format("1_0 user confirms successfully his phone number (Telephone:\'{0}\') with the two fa" +
                            "ctor authentication code", telephone), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 14
    testRunner.And(string.Format("1_0 user has a phone number (Telephone:\'{0}\') assigned and his phone is confirmed" +
                            " and user can be retrieved using his phone number", telephone), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("User request to confirm his phone number, ConsumerUser", new string[] {
                "basic"}, SourceLine=16)]
        public virtual void UserRequestToConfirmHisPhoneNumber_ConsumerUser()
        {
#line 5
this.UserRequestToConfirmHisPhoneNumber("ConsumerUser", "34608731005", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("User request to confirm his phone number, ProviderUser", new string[] {
                "basic"}, SourceLine=16)]
        public virtual void UserRequestToConfirmHisPhoneNumber_ProviderUser()
        {
#line 5
this.UserRequestToConfirmHisPhoneNumber("ProviderUser", "34608731006", ((string[])(null)));
#line hidden
        }
        
        public virtual void UserRequestToConfirmHisPhoneNumberButIntroducesAWrongAuthenticationCode(string userType, string telephone, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "basic"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("UserType", userType);
            argumentsOfScenario.Add("Telephone", telephone);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User request to confirm his phone number but introduces a wrong authentication co" +
                    "de", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 22
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 23
testRunner.Given(string.Format(@"1_0 a new user request with (Type:'{0}' UserName:'pescadosbahia.UserRequestToConfirmHisPhoneNumberButIntroducesAWrongAuthenticationCode.{0}' UserEmail:'pescadosbahia.UserRequestToConfirmHisPhoneNumberButIntroducesAWrongAuthenticationCode.{0}@mail.com' Password:',Adios22' Name:'PescadosBahia')", userType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 24
    testRunner.And("1_0 get user access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 25
    testRunner.And("1_0 response is Ok", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 26
    testRunner.And("1_0 start using access token for all requests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 27
    testRunner.And("1_0 start using access token for all requests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 28
    testRunner.When(string.Format("1_0 user requests to confirm his phone number (Telephone:\'{0}\')", telephone), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 29
    testRunner.Then("1_0 response is Accepted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 30
    testRunner.And(string.Format("1_0 a confirm phone sms was sent successfully to the user phone number (Telephone" +
                            ":\'{0}\') and the user was issued a valid two factor code using sms provider", telephone), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 31
    testRunner.When(string.Format("1_0 user fails to confirms successfully his phone number (Telephone:\'{0}\') with a" +
                            " wrong two factor authentication code", telephone), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 32
    testRunner.Then("1_0 response is BadRequest (MessageStartsWith:\'{\"errors\":{\"Code\":[\"Código no váli" +
                        "do\"]}\')", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("User request to confirm his phone number but introduces a wrong authentication co" +
            "de, ConsumerUser", new string[] {
                "basic"}, SourceLine=34)]
        public virtual void UserRequestToConfirmHisPhoneNumberButIntroducesAWrongAuthenticationCode_ConsumerUser()
        {
#line 22
this.UserRequestToConfirmHisPhoneNumberButIntroducesAWrongAuthenticationCode("ConsumerUser", "34608731022", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("User request to confirm his phone number but introduces a wrong authentication co" +
            "de, ProviderUser", new string[] {
                "basic"}, SourceLine=34)]
        public virtual void UserRequestToConfirmHisPhoneNumberButIntroducesAWrongAuthenticationCode_ProviderUser()
        {
#line 22
this.UserRequestToConfirmHisPhoneNumberButIntroducesAWrongAuthenticationCode("ProviderUser", "34608731023", ((string[])(null)));
#line hidden
        }
        
        public virtual void UserRequestToConfirmHisPhoneNumberButThePhoneIsAlreadyVerifiedOnAnotherUser(string userType, string telephone, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "basic"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("UserType", userType);
            argumentsOfScenario.Add("Telephone", telephone);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User request to confirm his phone number but the phone is already verified on ano" +
                    "ther user", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 40
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 41
testRunner.Given(string.Format(@"1_0 a new user request with (Type:'{0}' UserName:'saav.UserRequestToConfirmHisPhoneNumberButThePhoneIsAlreadyVerifiedOnAnotherUser.{0}' UserEmail:'saav.UserRequestToConfirmHisPhoneNumberButThePhoneIsAlreadyVerifiedOnAnotherUser.{0}@g.com' Password:',Adios22' Name:'saav')", userType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 42
    testRunner.And("1_0 get user access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 43
    testRunner.And("1_0 response is Ok", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 44
    testRunner.And("1_0 start using access token for all requests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 45
    testRunner.When(string.Format("1_0 user requests to confirm his phone number (Telephone:\'{0}\')", telephone), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 46
    testRunner.Then("1_0 response is Accepted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 47
    testRunner.And(string.Format("1_0 a confirm phone sms was sent successfully to the user phone number (Telephone" +
                            ":\'{0}\') and the user was issued a valid two factor code using sms provider", telephone), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 48
    testRunner.When(string.Format("1_0 user confirms successfully his phone number (Telephone:\'{0}\') with the two fa" +
                            "ctor authentication code", telephone), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 49
    testRunner.Then("1_0 response is Accepted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 50
    testRunner.Then(string.Format(@"1_0 a new user request with (Type:'{0}' UserName:'saav2.UserRequestToConfirmHisPhoneNumberButThePhoneIsAlreadyVerifiedOnAnotherUser.{0}' UserEmail:'saav2.UserRequestToConfirmHisPhoneNumberButThePhoneIsAlreadyVerifiedOnAnotherUser.{0}@g.com' Password:',Adios22' Name:'saav2')", userType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 51
    testRunner.Given("1_0 get user access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 52
    testRunner.And("1_0 response is Ok", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 53
    testRunner.And("1_0 start using access token for all requests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 54
    testRunner.When(string.Format("1_0 user requests to confirm his phone number (Telephone:\'{0}\')", telephone), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 55
    testRunner.Then("1_0 response is BadRequest (MessageStartsWith:\'{\"errors\":{\"telephone\":[\"Este núme" +
                        "ro ya ha sido verificado por otro usuario\"]}\')", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("User request to confirm his phone number but the phone is already verified on ano" +
            "ther user, ConsumerUser", new string[] {
                "basic"}, SourceLine=57)]
        public virtual void UserRequestToConfirmHisPhoneNumberButThePhoneIsAlreadyVerifiedOnAnotherUser_ConsumerUser()
        {
#line 40
this.UserRequestToConfirmHisPhoneNumberButThePhoneIsAlreadyVerifiedOnAnotherUser("ConsumerUser", "34608731041", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("User request to confirm his phone number but the phone is already verified on ano" +
            "ther user, ProviderUser", new string[] {
                "basic"}, SourceLine=57)]
        public virtual void UserRequestToConfirmHisPhoneNumberButThePhoneIsAlreadyVerifiedOnAnotherUser_ProviderUser()
        {
#line 40
this.UserRequestToConfirmHisPhoneNumberButThePhoneIsAlreadyVerifiedOnAnotherUser("ProviderUser", "34608731042", ((string[])(null)));
#line hidden
        }
        
        public virtual void UserRequestToConfirmAPhoneThatHasBeenAlreadyVerifiedInHisAccount(string userType, string telephone, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "basic"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("UserType", userType);
            argumentsOfScenario.Add("Telephone", telephone);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User request to confirm a phone that has been already verified in his account", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 63
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 64
testRunner.Given(string.Format("1_0 a new user request with (Type:\'{0}\' UserName:\'saav.UserRequestToConfirmAPhone" +
                            "ThatHasBeenAlreadyVerifiedInHisAccount.{0}\' UserEmail:\'saav.UserRequestToConfirm" +
                            "APhoneThatHasBeenAlreadyVerifiedInHisAccount.{0}@g.com\' Password:\',Adios22\' Name" +
                            ":\'saav\')", userType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 65
    testRunner.And("1_0 get user access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 66
    testRunner.And("1_0 response is Ok", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 67
    testRunner.And("1_0 start using access token for all requests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 68
    testRunner.When(string.Format("1_0 user requests to confirm his phone number (Telephone:\'{0}\')", telephone), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 69
    testRunner.Then("1_0 response is Accepted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 70
    testRunner.And(string.Format("1_0 a confirm phone sms was sent successfully to the user phone number (Telephone" +
                            ":\'{0}\') and the user was issued a valid two factor code using sms provider", telephone), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 71
    testRunner.When(string.Format("1_0 user confirms successfully his phone number (Telephone:\'{0}\') with the two fa" +
                            "ctor authentication code", telephone), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 72
    testRunner.When(string.Format("1_0 user requests to confirm his phone number (Telephone:\'{0}\')", telephone), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 73
    testRunner.Then("1_0 response is BadRequest (MessageStartsWith:\'{\"errors\":{\"telephone\":[\"Ya has ve" +
                        "rificado este número en tu cuenta\"]}\')", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("User request to confirm a phone that has been already verified in his account, Co" +
            "nsumerUser", new string[] {
                "basic"}, SourceLine=75)]
        public virtual void UserRequestToConfirmAPhoneThatHasBeenAlreadyVerifiedInHisAccount_ConsumerUser()
        {
#line 63
this.UserRequestToConfirmAPhoneThatHasBeenAlreadyVerifiedInHisAccount("ConsumerUser", "34608731063", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("User request to confirm a phone that has been already verified in his account, Pr" +
            "oviderUser", new string[] {
                "basic"}, SourceLine=75)]
        public virtual void UserRequestToConfirmAPhoneThatHasBeenAlreadyVerifiedInHisAccount_ProviderUser()
        {
#line 63
this.UserRequestToConfirmAPhoneThatHasBeenAlreadyVerifiedInHisAccount("ProviderUser", "34608731064", ((string[])(null)));
#line hidden
        }
        
        public virtual void UserRequestToConfirmAPhoneAndRequestSMSTwoTimes(string userType, string telephone, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "basic"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("UserType", userType);
            argumentsOfScenario.Add("Telephone", telephone);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User request to confirm a phone and request SMS two times", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 81
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 82
testRunner.Given(string.Format("1_0 a new user request with (Type:\'{0}\' UserName:\'saav.UserRequestToConfirmAPhone" +
                            "AndRequestSmsTwoTimes.{0}\' UserEmail:\'saav.UserRequestToConfirmAPhoneAndRequestS" +
                            "msTwoTimes.{0}@g.com\' Password:\',Adios22\' Name:\'saav\')", userType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 83
    testRunner.And("1_0 get user access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 84
    testRunner.And("1_0 response is Ok", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 85
    testRunner.And("1_0 start using access token for all requests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 86
    testRunner.When(string.Format("1_0 user requests to confirm his phone number (Telephone:\'{0}\')", telephone), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 87
    testRunner.Then("1_0 response is Accepted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 88
    testRunner.And(string.Format("1_0 a confirm phone sms was sent successfully to the user phone number (Telephone" +
                            ":\'{0}\') and the user was issued a valid two factor code using sms provider", telephone), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 89
    testRunner.When(string.Format("1_0 user requests to confirm his phone number (Telephone:\'{0}\')", telephone), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 90
    testRunner.Then("1_0 response is Accepted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 91
    testRunner.And(string.Format("1_0 a confirm phone sms was sent successfully to the user phone number by second " +
                            "time (Telephone:\'{0}\') and the user was issued a valid two factor code using sms" +
                            " provider", telephone), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 92
    testRunner.When(string.Format("1_0 user confirms successfully his phone number (Telephone:\'{0}\') with the two fa" +
                            "ctor authentication code", telephone), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 93
    testRunner.And(string.Format("1_0 user has a phone number (Telephone:\'{0}\') assigned and his phone is confirmed" +
                            " and user can be retrieved using his phone number", telephone), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 94
    testRunner.Then("1_0 check current NewPhoneRequested is null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("User request to confirm a phone and request SMS two times, ConsumerUser", new string[] {
                "basic"}, SourceLine=96)]
        public virtual void UserRequestToConfirmAPhoneAndRequestSMSTwoTimes_ConsumerUser()
        {
#line 81
this.UserRequestToConfirmAPhoneAndRequestSMSTwoTimes("ConsumerUser", "34608731081", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("User request to confirm a phone and request SMS two times, ProviderUser", new string[] {
                "basic"}, SourceLine=96)]
        public virtual void UserRequestToConfirmAPhoneAndRequestSMSTwoTimes_ProviderUser()
        {
#line 81
this.UserRequestToConfirmAPhoneAndRequestSMSTwoTimes("ProviderUser", "34608731082", ((string[])(null)));
#line hidden
        }
        
        public virtual void UserRequestToConfirmAPhoneAndRequestSMS_ButTheSMSIsNotSend_AndUserSendsACode_(string userType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "basic"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("UserType", userType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User request to confirm a phone and request SMS. But the SMS is not send. And use" +
                    "r sends a code.", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 103
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 104
testRunner.Given(string.Format(@"1_0 a new user request with (Type:'{0}' UserName:'saav.UserRequestToConfirmAPhoneAndRequestSmsButTheSmsIsNotSendAndUserSendsACode.{0}' UserEmail:'saav.UserRequestToConfirmAPhoneAndRequestSmsButTheSmsIsNotSendAndUserSendsACode.{0}@g.com' Password:',Adios22' Name:'saav')", userType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 105
    testRunner.And("1_0 get user access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 106
    testRunner.And("1_0 response is Ok", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 107
    testRunner.And("1_0 start using access token for all requests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 108
    testRunner.When("1_0 user requests to confirm his phone number (Telephone:\'34608731102\')", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 109
    testRunner.Then("1_0 response is Accepted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 110
    testRunner.When("1_0 user fails to confirms successfully his phone number (Telephone:\'34608731102\'" +
                        ") with a wrong two factor authentication code", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 111
    testRunner.Then("1_0 response is BadRequest (MessageStartsWith:\'{\"errors\":{\"Code\":[\"Código no váli" +
                        "do\"]}\')", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("User request to confirm a phone and request SMS. But the SMS is not send. And use" +
            "r sends a code., ConsumerUser", new string[] {
                "basic"}, SourceLine=113)]
        public virtual void UserRequestToConfirmAPhoneAndRequestSMS_ButTheSMSIsNotSend_AndUserSendsACode__ConsumerUser()
        {
#line 103
this.UserRequestToConfirmAPhoneAndRequestSMS_ButTheSMSIsNotSend_AndUserSendsACode_("ConsumerUser", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("User request to confirm a phone and request SMS. But the SMS is not send. And use" +
            "r sends a code., ProviderUser", new string[] {
                "basic"}, SourceLine=113)]
        public virtual void UserRequestToConfirmAPhoneAndRequestSMS_ButTheSMSIsNotSend_AndUserSendsACode__ProviderUser()
        {
#line 103
this.UserRequestToConfirmAPhoneAndRequestSMS_ButTheSMSIsNotSend_AndUserSendsACode_("ProviderUser", ((string[])(null)));
#line hidden
        }
        
        public virtual void UserHasAVerifiedPhoneNumberAndWantsToChangeItForAnother(string userType, string firstTelephone, string secondTelephone, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "basic"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("UserType", userType);
            argumentsOfScenario.Add("FirstTelephone", firstTelephone);
            argumentsOfScenario.Add("SecondTelephone", secondTelephone);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User has a verified phone number and wants to change it for another", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 119
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 120
testRunner.Given(string.Format(@"1_0 a new user request with (Type:'{0}' UserName:'pescadosbahia.UserHasAVerifiedPhoneNumberAndWantsToChangeItForAnother.{0}' UserEmail:'pescadosbahia.UserHasAVerifiedPhoneNumberAndWantsToChangeItForAnother.{0}@mail.com' Password:',Adios22' Name:'PescadosBahia')", userType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 121
    testRunner.And("1_0 get user access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 122
    testRunner.And("1_0 response is Ok", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 123
    testRunner.And("1_0 start using access token for all requests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 124
    testRunner.When(string.Format("1_0 user requests to confirm his phone number (Telephone:\'{0}\')", firstTelephone), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 125
    testRunner.Then("1_0 response is Accepted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 126
    testRunner.And(string.Format("1_0 a confirm phone sms was sent successfully to the user phone number (Telephone" +
                            ":\'{0}\') and the user was issued a valid two factor code using sms provider", firstTelephone), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 127
    testRunner.When(string.Format("1_0 user confirms successfully his phone number (Telephone:\'{0}\') with the two fa" +
                            "ctor authentication code", firstTelephone), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 128
    testRunner.Then("1_0 response is Accepted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 129
    testRunner.And(string.Format("1_0 user has a phone number (Telephone:\'{0}\') assigned and his phone is confirmed" +
                            " and user can be retrieved using his phone number", firstTelephone), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 130
    testRunner.When(string.Format("1_0 user requests to confirm his phone number (Telephone:\'{0}\')", secondTelephone), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 131
    testRunner.Then("1_0 response is Accepted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 132
    testRunner.And(string.Format("1_0 a confirm phone sms was sent successfully to the user phone number (Telephone" +
                            ":\'{0}\') and the user was issued a valid two factor code using sms provider", secondTelephone), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 133
    testRunner.When(string.Format("1_0 user confirms successfully his phone number (Telephone:\'{0}\') with the two fa" +
                            "ctor authentication code", secondTelephone), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 134
    testRunner.And(string.Format("1_0 user has a phone number (Telephone:\'{0}\') assigned and his phone is confirmed" +
                            " and user can be retrieved using his phone number", secondTelephone), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("User has a verified phone number and wants to change it for another, ConsumerUser" +
            "", new string[] {
                "basic"}, SourceLine=136)]
        public virtual void UserHasAVerifiedPhoneNumberAndWantsToChangeItForAnother_ConsumerUser()
        {
#line 119
this.UserHasAVerifiedPhoneNumberAndWantsToChangeItForAnother("ConsumerUser", "34608731118", "34608731120", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("User has a verified phone number and wants to change it for another, ProviderUser" +
            "", new string[] {
                "basic"}, SourceLine=136)]
        public virtual void UserHasAVerifiedPhoneNumberAndWantsToChangeItForAnother_ProviderUser()
        {
#line 119
this.UserHasAVerifiedPhoneNumberAndWantsToChangeItForAnother("ProviderUser", "34608731119", "34608731121", ((string[])(null)));
#line hidden
        }
        
        public virtual void UserRequestConfirmationWithInvalidPhoneNumber(string userType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "basic"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("UserType", userType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User request confirmation with invalid phone number", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 142
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 143
testRunner.Given(string.Format("1_0 a new user request with (Type:\'{0}\' UserName:\'pescadosbahia.UserRequestConfir" +
                            "mationWithInvalidPhoneNumber.{0}\' UserEmail:\'pescadosbahia.UserRequestConfirmati" +
                            "onWithInvalidPhoneNumber.{0}@mail.com\' Password:\',Adios22\' Name:\'PescadosBahia\')" +
                            "", userType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 144
    testRunner.And("1_0 get user access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 145
    testRunner.And("1_0 response is Ok", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 146
    testRunner.And("1_0 start using access token for all requests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 147
    testRunner.When("1_0 user requests to confirm his phone number (Telephone:\'60873163434\')", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 148
    testRunner.Then("1_0 response is BadRequest (MessageStartsWith:\'{\"errors\":{\"telephone\":[\"El número" +
                        " de teléfono debe tener un prefijo válido\"]}\')", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 149
    testRunner.When("1_0 user requests to confirm his phone number (Telephone:\'3460873163\')", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 150
    testRunner.Then("1_0 response is BadRequest (MessageStartsWith:\'{\"errors\":{\"telephone\":[\"El número" +
                        " de teléfono no es válido\"]}\')", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("User request confirmation with invalid phone number, ConsumerUser", new string[] {
                "basic"}, SourceLine=152)]
        public virtual void UserRequestConfirmationWithInvalidPhoneNumber_ConsumerUser()
        {
#line 142
this.UserRequestConfirmationWithInvalidPhoneNumber("ConsumerUser", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("User request confirmation with invalid phone number, ProviderUser", new string[] {
                "basic"}, SourceLine=152)]
        public virtual void UserRequestConfirmationWithInvalidPhoneNumber_ProviderUser()
        {
#line 142
this.UserRequestConfirmationWithInvalidPhoneNumber("ProviderUser", ((string[])(null)));
#line hidden
        }
        
        public virtual void RequestFromLandlineNumber(string userType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "basic"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("UserType", userType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Request from landline number", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 158
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 159
testRunner.Given(string.Format("1_0 a new user request with (Type:\'{0}\' UserName:\'pescadosbahia.RequestFromLandli" +
                            "neNumber.{0}\' UserEmail:\'pescadosbahia.RequestFromLandlineNumber.{0}@mail.com\' P" +
                            "assword:\',Adios22\' Name:\'PescadosBahia\')", userType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 160
    testRunner.And("1_0 get user access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 161
    testRunner.And("1_0 response is Ok", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 162
    testRunner.And("1_0 start using access token for all requests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 163
    testRunner.When("1_0 user requests to confirm his phone number (Telephone:\'34902123123\')", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 164
    testRunner.Then("1_0 response is BadRequest (MessageStartsWith:\'{\"errors\":{\"telephone\":[\"El número" +
                        " de teléfono no puede ser un número fijo\"]}\')", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Request from landline number, ConsumerUser", new string[] {
                "basic"}, SourceLine=166)]
        public virtual void RequestFromLandlineNumber_ConsumerUser()
        {
#line 158
this.RequestFromLandlineNumber("ConsumerUser", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Request from landline number, ProviderUser", new string[] {
                "basic"}, SourceLine=166)]
        public virtual void RequestFromLandlineNumber_ProviderUser()
        {
#line 158
this.RequestFromLandlineNumber("ProviderUser", ((string[])(null)));
#line hidden
        }
        
        public virtual void SMSCredentialsNotValid_SendsSMSButAPI_KEYIsNotAuthorized(string userType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ignore"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("UserType", userType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SMS credentials not valid. Sends SMS but API_KEY is not authorized", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 172
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 173
    testRunner.And(string.Format(@"1_0 a new user request with (Type:'{0}' UserName:'pescadosbahia.SmsCredentialsNotValidSendsSmsButApiKeyIsNotAuthorized.{0}' UserEmail:'pescadosbahia.SmsCredentialsNotValidSendsSmsButApiKeyIsNotAuthorized.{0}@mail.com' Password:',Adios22' Name:'PescadosBahia')", userType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 174
    testRunner.And("1_0 get user access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 175
    testRunner.And("1_0 response is Ok", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 176
    testRunner.And("1_0 start using access token for all requests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 177
    testRunner.Then("1_0 user requests to confirm his phone number MockUp the API with UNAUTHORIZED se" +
                        "ttings (Telephone:\'34608731171\')", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 178
    testRunner.Then("1_0 response is BadRequest and external API sends message (MessageStartsWith:\'{\"e" +
                        "rrors\":{\"SMS\":[\"La API KEY es invalida, comprueba que has puesto la API KEY corr" +
                        "ecta o mira si tu cuenta esta bloqueada.\"]}\')", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("SMS credentials not valid. Sends SMS but API_KEY is not authorized, ConsumerUser", new string[] {
                "ignore"}, SourceLine=180)]
        public virtual void SMSCredentialsNotValid_SendsSMSButAPI_KEYIsNotAuthorized_ConsumerUser()
        {
#line 172
this.SMSCredentialsNotValid_SendsSMSButAPI_KEYIsNotAuthorized("ConsumerUser", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("SMS credentials not valid. Sends SMS but API_KEY is not authorized, ProviderUser", new string[] {
                "ignore"}, SourceLine=180)]
        public virtual void SMSCredentialsNotValid_SendsSMSButAPI_KEYIsNotAuthorized_ProviderUser()
        {
#line 172
this.SMSCredentialsNotValid_SendsSMSButAPI_KEYIsNotAuthorized("ProviderUser", ((string[])(null)));
#line hidden
        }
        
        public virtual void SmsUpIsOutOfFounds(string userType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ignore"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("UserType", userType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SmsUp is out of founds", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 185
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 186
    testRunner.And(string.Format("1_0 a new user request with (Type:\'{0}\' UserName:\'pescadosbahia.SmsUpIsOutOfFound" +
                            "s{0}\' UserEmail:\'pescadosbahia.SmsUpIsOutOfFounds.{0}@mail.com\' Password:\',Adios" +
                            "22\' Name:\'PescadosBahia\')", userType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 187
    testRunner.And("1_0 get user access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 188
    testRunner.And("1_0 response is Ok", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 189
    testRunner.And("1_0 start using access token for all requests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 190
    testRunner.Then("1_0 user requests to confirm his phone number MockUp the API without FOUNDS (Tele" +
                        "phone:\'34608731184\')", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 191
    testRunner.Then("1_0 response is BadRequest and external API sends message (MessageStartsWith:\'{\"e" +
                        "rrors\":{\"SMS\":[\"La cuenta está sin fondos para procesar esta respuesta, añade cr" +
                        "edito a la cuenta y prueba de nuevo\"]}\')", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("SmsUp is out of founds, ConsumerUser", new string[] {
                "ignore"}, SourceLine=193)]
        public virtual void SmsUpIsOutOfFounds_ConsumerUser()
        {
#line 185
this.SmsUpIsOutOfFounds("ConsumerUser", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("SmsUp is out of founds, ProviderUser", new string[] {
                "ignore"}, SourceLine=193)]
        public virtual void SmsUpIsOutOfFounds_ProviderUser()
        {
#line 185
this.SmsUpIsOutOfFounds("ProviderUser", ((string[])(null)));
#line hidden
        }
        
        public virtual void SmsUpWithBadParams(string userType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ignore"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("UserType", userType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SmsUp with BadParams", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 199
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 200
    testRunner.And(string.Format("1_0 a new user request with (Type:\'{0}\' UserName:\'pescadosbahia.SmsUpWithBadparam" +
                            "s.{0}\' UserEmail:\'pescadosbahia.SmsUpWithBadparams.{0}@mail.com\' Password:\',Adio" +
                            "s22\' Name:\'PescadosBahia\')", userType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 201
    testRunner.And("1_0 get user access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 202
    testRunner.And("1_0 response is Ok", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 203
    testRunner.And("1_0 start using access token for all requests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 204
    testRunner.Then("1_0 user requests to confirm his phone number MockUp the API with BAD_PARAMS (Tel" +
                        "ephone:\'34608731198\')", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 205
    testRunner.Then("1_0 response is BadRequest and external API sends message (MessageStartsWith:\'{\"e" +
                        "rrors\":{\"SMS\":[\"Uno o más parámetros son incorrectos\"]}\')", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("SmsUp with BadParams, ConsumerUser", new string[] {
                "ignore"}, SourceLine=207)]
        public virtual void SmsUpWithBadParams_ConsumerUser()
        {
#line 199
this.SmsUpWithBadParams("ConsumerUser", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("SmsUp with BadParams, ProviderUser", new string[] {
                "ignore"}, SourceLine=207)]
        public virtual void SmsUpWithBadParams_ProviderUser()
        {
#line 199
this.SmsUpWithBadParams("ProviderUser", ((string[])(null)));
#line hidden
        }
        
        public virtual void SmsUpWithInvalidDestination(string userType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ignore"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("UserType", userType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("SmsUp with invalid destination", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 213
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 214
    testRunner.And(string.Format("1_0 a new user request with (Type:\'{0}\' UserName:\'pescadosbahia.SmsUpWithInvalidD" +
                            "estination.{0}\' UserEmail:\'pescadosbahia.SmsUpWithInvalidDestination.{0}@mail.co" +
                            "m\' Password:\',Adios22\' Name:\'PescadosBahia\')", userType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 215
    testRunner.And("1_0 get user access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 216
    testRunner.And("1_0 response is Ok", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 217
    testRunner.And("1_0 start using access token for all requests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 218
    testRunner.Then("1_0 user requests to confirm his phone number MockUp the API with INVALID_DESTINA" +
                        "TION (Telephone:\'34608731212\')", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 219
    testRunner.Then("1_0 response is BadRequest and external API sends message (MessageStartsWith:\'{\"e" +
                        "rrors\":{\"SMS\":[\"El servicio no pudo procesar el destino del sms. El número debe " +
                        "estar en formato MSISDN. Ej: 34612345678\"]}\')", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("SmsUp with invalid destination, ConsumerUser", new string[] {
                "ignore"}, SourceLine=221)]
        public virtual void SmsUpWithInvalidDestination_ConsumerUser()
        {
#line 213
this.SmsUpWithInvalidDestination("ConsumerUser", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("SmsUp with invalid destination, ProviderUser", new string[] {
                "ignore"}, SourceLine=221)]
        public virtual void SmsUpWithInvalidDestination_ProviderUser()
        {
#line 213
this.SmsUpWithInvalidDestination("ProviderUser", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Test MaxFailAccesAttemps && DefaultLockOutTimeSpan", new string[] {
                "ignore"}, SourceLine=226)]
        public virtual void TestMaxFailAccesAttempsDefaultLockOutTimeSpan()
        {
            string[] tagsOfScenario = new string[] {
                    "ignore"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test MaxFailAccesAttemps && DefaultLockOutTimeSpan", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 227
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
